<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[npm设置]]></title>
    <url>%2F2019%2F01%2F06%2Fnpm%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[查看npm安装目录： 1npm root -g 查看npm的prefix和cache路径配置信息 12npm config get cachenpm config get prefix 查看npm配置信息 1npm config list 修改全局和缓存路径 12npm config set prefix E:\Repositorys\npm\node_cachenpm config set cache E:\Repositorys\npm\node_global 设置镜像源 12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global]]></content>
      <tags>
        <tag>Npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java常见数据结构]]></title>
    <url>%2F2018%2F07%2F01%2FJava%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[ArrayList/Vecotor内部数据结构：动态数组 ArrayListpublic class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.SerializableArrayList实现了List，RandomAccess，Cloneable, Serializable接口。成员变量中核心变量为Object[] elementData 以及int size。可以看出ArrayList内部实现是基于 数组的。 ArrayList#add方法ArrayList#add(e)添加元素在调用add(e)方法时，先进行扩容校验然后把数组大小size++并将待插入的数据添加在数组末端。 1234567891011121314151617181920212223242526272829303132/** * Appends the specified element to the end of this list. * * @param e element to be appended to this list * @return &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;@link Collection#add&#125;) */public boolean add(E e) &#123; ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true;&#125;/** * Default initial capacity. */private static final int DEFAULT_CAPACITY = 10;private void ensureCapacityInternal(int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); &#125; ensureExplicitCapacity(minCapacity);&#125;private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125; ArrayList#add(index, e)在调用add(index, e)时，先进行扩容校验，然后把从目标位置index到数组结尾的数据使用System.arraycop向后移动一个位置，最后将数据e存放在index位置上。 1234567891011121314151617/** * Inserts the specified element at the specified position in this * list. Shifts the element currently at that position (if any) and * any subsequent elements to the right (adds one to their indices). * * @param index index at which the specified element is to be inserted * @param element element to be inserted * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125; */public void add(int index, E element) &#123; rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++;&#125; 扩容校验从源码可以看出，每次扩容实际上是数组拷贝的过程。每次扩容完成后大小一般为原大小的1.5 倍。 12345678910111213141516171819202122232425262728293031323334/** * The maximum size of array to allocate. * Some VMs reserve some header words in an array. * Attempts to allocate larger arrays may result in * OutOfMemoryError: Requested array size exceeds VM limit */private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;/** * Increases the capacity to ensure that it can hold at least the * number of elements specified by the minimum capacity argument. * * @param minCapacity the desired minimum capacity */private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);//newCapacity = oldCapacity* 1.5 if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125;private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;&#125; ArrayList#序列化由于ArrayList并不是所有位置都被使用，所以数组加入了transient修饰，防止序列化arrayList时由于序列化未完全使用数组带来的性能损失。ArrayList实现了Serializable自定义了序列化与反序列化，只序列化了实际存储的那些元素，而不是整个数组。 12345678910111213141516171819202122232425/** * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is, * deserialize it). */private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException &#123; elementData = EMPTY_ELEMENTDATA; // Read in size, and any hidden stuff s.defaultReadObject(); // Read in capacity s.readInt(); // ignored if (size &gt; 0) &#123; // be like clone(), allocate array based upon size not capacity ensureCapacityInternal(size); Object[] a = elementData; // Read in all elements in the proper order. for (int i=0; i&lt;size; i++) &#123; a[i] = s.readObject(); &#125; &#125;&#125; 从源码中，可以观察到循环时是使用i &lt; size而不是 i &lt; elementData.length，说明序列化时，只需实际存储的那些元素，而不是整个数组。 Vectorpublic class Vector&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.SerializableVoctor也实现了List接口，底层数据结构和ArrayList类似,也是一个动态数组存放数据。不同之处在于: add()方法的时候使用synchronize进行同步写数据，但是开销较大，所以Vector是一个同步容器并不是一个并发容器; 扩容时大小变化：若未指定capacityIncrement则扩容为原来的两倍。 LinkedList内部数据结构：双向链表 public class LinkedList&lt;E&gt; extends AbstractSequentialList&lt;E&gt; implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable LinkedList实现了List, Deque, Cloneable, Serializable接口，同时拥有List和Deque特性。 LinkdedList#add方法通过移动链表指针的方式实现。添加元素至头/尾仅需要移动指针，所以十分高效。 123456789101112131415161718192021222324252627/** * Appends the specified element to the end of this list. * * &lt;p&gt;This method is equivalent to &#123;@link #addLast&#125;. * * @param e element to be appended to this list * @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;) */public boolean add(E e) &#123; linkLast(e); return true;&#125;/** * Links e as last element. */void linkLast(E e) &#123; final Node&lt;E&gt; l = last; final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); last = newNode; if (l == null) first = newNode; else l.next = newNode; size++; modCount++;&#125; LinkedList查询方法LinkedList#get(i)通过二分查找法查找指定位置数据，通过index离size中间距离来判断是从头结点正序查还是从尾节点倒序查。 node()会以O(n/2) 的性能去获取一个结点：如果索引值大于链表大小的一半，那么将从尾结点开始遍历。这样的效率是非常低的，特别是当 index 越接近 size 的中间值时。 ArrayList， Vector和LinkedList对比 ArrayList LinkedList Vector 内部数据结构 动态数组 双向链表 动态数组 同步性 不同步 不同步 同步 数据增长 复制数组，一般扩容为原来大小的1.5倍 移动链表指针 复制数组，一般扩容为原来大小的2倍 随机读取 快，可以直接根据index获取，时间复杂度 O(1) 越index接近size/2效率越低，时间复杂度 O(n) 快，可以直接根据index获取，时间复杂度 O(1) 添加元素add(e) 慢，扩容和中间插入都需要复制数组，时间复杂度 O(1) 快，时间复杂度 O(1) 慢，扩容和中间插入都需要复制数组 ，时间复杂度 O(1) 添加元素add(int, e) 慢，扩容和中间插入都需要复制数组，时间复杂度 O(n) 快，时间复杂度 O(n) 慢，扩容和中间插入都需要复制数组 ，时间复杂度 O(n) 删除元素 慢，remove(int)要优于remove(Object) 快，remove(int)和remove(Object)的方法的时间复杂度都是 O(n) 慢，remove(int)要优于remove(Object) 此处时间复杂度存疑，待确认。 HashMap/HashtableHashSetLinkedHashMap]]></content>
      <categories>
        <category>编程</category>
        <category>后端</category>
        <category>Java</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java技能树]]></title>
    <url>%2F2018%2F07%2F01%2Fjava%E6%8A%80%E8%83%BD%E6%A0%91%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>编程</category>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo部署至GitHub遇到的问题]]></title>
    <url>%2F2018%2F06%2F27%2FHexo%E9%83%A8%E7%BD%B2%E8%87%B3GitHub%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[谨以此文记录将Hexo博客部署至GitHub时遇到的问题，方便以后查阅。 使用hexo deploy 命令部署博客时提示：Deployer not found: git 解决办法：在博客根目录下执行 npm install --save hexo-deployer-git 无法读取本地md文件引用图片 解决办法： 修改根目录下 _config.yml 中post_asset_folder: false为true； 安装插件npm install hexo-asset-image --save]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Webpage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven阿里镜像]]></title>
    <url>%2F2018%2F06%2F27%2Fmaven%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[maven作为一个项目管理工具确实非常好用，但是在国内这个网络条件下实在是让人恼火。之前oschina的中央仓库可用，现在oschina的maven服务器关了，一直没找到国内镜像来替代。今天发现阿里云公开了一个中央仓库，大家可以试试。 配置修改maven根目录下的conf文件夹中的setting.xml文件，内容如下： 12345678&lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;/mirrors&gt; 之后就能享受如飞的maven下载速度。]]></content>
      <categories>
        <category>项目管理工具</category>
        <category>Maven</category>
        <category>设置</category>
        <category>镜像设置</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1hexo new "My New Post" More info: Writing Run server1hexo server More info: Server Generate static files1hexo generate More info: Generating Deploy to remote sites1hexo deploy More info: Deployment]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>新手上路</tag>
      </tags>
  </entry>
</search>
